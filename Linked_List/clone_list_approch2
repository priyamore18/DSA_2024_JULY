/*#include <iostream>

// Definition for linked list.
class Node {
public:
    int data;
    Node *next;
    Node *random;
    Node() : data(0), next(nullptr), random(nullptr) {}
    Node(int x) : data(x), next(nullptr), random(nullptr) {}
    Node(int x, Node *next, Node *random) : data(x), next(next), random(random) {}
};*/

// Helper function to insert a node at the tail of the list
void insertatTail(Node *&head, Node *&tail, int d) {
    Node *temp = new Node(d);
    if (head == NULL) {
        head = temp;
        tail = temp;
    } else {
        tail->next = temp;
        tail = temp;
    }
}

Node *cloneLL(Node *head) {
    if (head == NULL) return NULL;

    // Step 1: Create a copy of the original list without random pointers
    Node *RandomHead = NULL;
    Node *RandomTail = NULL;
    Node *temp = head;
    while (temp != NULL) {
        insertatTail(RandomHead, RandomTail, temp->data);
        temp = temp->next;
    }

    // Step 2: Interleave the original and cloned nodes
    Node *originalNode = head;
    Node *cloneNode = RandomHead;
    while (originalNode != NULL && cloneNode != NULL) {
        Node *next = originalNode->next;
        originalNode->next = cloneNode;
        originalNode = next;
        if (cloneNode != NULL) {
            cloneNode->next = originalNode;
            cloneNode = cloneNode->next;
        }
    }

    // Step 3: Set random pointers in the cloned nodes
    originalNode = head;
    while (originalNode != NULL) {
        if (originalNode->next != NULL && originalNode->random != NULL) {
            originalNode->next->random = originalNode->random->next;
        }
        originalNode = originalNode->next->next;
    }

    // Step 4: Restore the original list and separate the cloned list
    originalNode = head;
    cloneNode = RandomHead;
    Node *cloneHead = cloneNode;
    while (originalNode != NULL && cloneNode != NULL) {
        originalNode->next = cloneNode->next;
        originalNode = originalNode->next;
        if (originalNode != NULL) {
            cloneNode->next = originalNode->next;
            cloneNode = cloneNode->next;
        }
    }

    return cloneHead;
}

// Function to print the list (for debugging purposes)

